[{"D:\\pern\\client\\src\\index.js":"1","D:\\pern\\client\\src\\App.js":"2","D:\\pern\\client\\src\\store\\UserStore.js":"3","D:\\pern\\client\\src\\store\\DeviceStore.js":"4","D:\\pern\\client\\src\\components\\NavBar.js":"5","D:\\pern\\client\\src\\components\\AppRouter.js":"6","D:\\pern\\client\\src\\http\\userAPI.js":"7","D:\\pern\\client\\src\\routes.js":"8","D:\\pern\\client\\src\\http\\index.js":"9","D:\\pern\\client\\src\\utils\\consts.js":"10","D:\\pern\\client\\src\\pages\\About.js":"11","D:\\pern\\client\\src\\pages\\DevicePage.js":"12","D:\\pern\\client\\src\\pages\\Auth.js":"13","D:\\pern\\client\\src\\pages\\Shop.js":"14","D:\\pern\\client\\src\\pages\\Basket.js":"15","D:\\pern\\client\\src\\pages\\Admin.js":"16","D:\\pern\\client\\src\\http\\deviceAPI.js":"17","D:\\pern\\client\\src\\components\\Pages.js":"18","D:\\pern\\client\\src\\components\\DeviceList.js":"19","D:\\pern\\client\\src\\components\\BrandBar.js":"20","D:\\pern\\client\\src\\components\\TypeBar.js":"21","D:\\pern\\client\\src\\components\\modals\\CreateType.js":"22","D:\\pern\\client\\src\\components\\modals\\CreateDevice.js":"23","D:\\pern\\client\\src\\components\\modals\\CreateBrand.js":"24","D:\\pern\\client\\src\\components\\DeviceItem.js":"25","D:\\pern\\client\\src\\components\\modals\\UpdateDevice.js":"26"},{"size":457,"mtime":1631458832486,"results":"27","hashOfConfig":"28"},{"size":893,"mtime":1631458832486,"results":"29","hashOfConfig":"28"},{"size":424,"mtime":1631458832486,"results":"30","hashOfConfig":"28"},{"size":1445,"mtime":1635098425194,"results":"31","hashOfConfig":"28"},{"size":1897,"mtime":1631458832486,"results":"32","hashOfConfig":"28"},{"size":820,"mtime":1631458832486,"results":"33","hashOfConfig":"28"},{"size":715,"mtime":1631458832486,"results":"34","hashOfConfig":"28"},{"size":968,"mtime":1635102477247,"results":"35","hashOfConfig":"28"},{"size":428,"mtime":1631458832486,"results":"36","hashOfConfig":"28"},{"size":271,"mtime":1635102477294,"results":"37","hashOfConfig":"28"},{"size":656,"mtime":1635103167115,"results":"38","hashOfConfig":"28"},{"size":3307,"mtime":1637658413535,"results":"39","hashOfConfig":"28"},{"size":3224,"mtime":1631458832486,"results":"40","hashOfConfig":"28"},{"size":1586,"mtime":1631458832486,"results":"41","hashOfConfig":"28"},{"size":157,"mtime":1631458832486,"results":"42","hashOfConfig":"28"},{"size":1591,"mtime":1635113153869,"results":"43","hashOfConfig":"28"},{"size":1366,"mtime":1641917107739,"results":"44","hashOfConfig":"28"},{"size":831,"mtime":1631458832486,"results":"45","hashOfConfig":"28"},{"size":510,"mtime":1635112716613,"results":"46","hashOfConfig":"28"},{"size":785,"mtime":1631458832486,"results":"47","hashOfConfig":"28"},{"size":777,"mtime":1631458832486,"results":"48","hashOfConfig":"28"},{"size":1399,"mtime":1631458832486,"results":"49","hashOfConfig":"28"},{"size":7146,"mtime":1635109970326,"results":"50","hashOfConfig":"28"},{"size":1415,"mtime":1631458832486,"results":"51","hashOfConfig":"28"},{"size":3212,"mtime":1641920387372,"results":"52","hashOfConfig":"28"},{"size":3072,"mtime":1641917466895,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"17ytf63",{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"56"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"56"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},"D:\\pern\\client\\src\\index.js",[],["116","117"],"D:\\pern\\client\\src\\App.js",["118"],"import React, {useContext, useEffect, useState} from 'react';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport AppRouter from \"./components/AppRouter\";\r\nimport NavBar from \"./components/NavBar\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {Context} from \"./index\";\r\nimport {check} from \"./http/userAPI\";\r\nimport {Spinner} from \"react-bootstrap\";\r\n\r\nconst App = observer(() => {\r\n    const {user} = useContext(Context)\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    useEffect(() => {\r\n        check().then(data => {\r\n            user.setUser(true)\r\n            user.setIsAuth(true)\r\n        }).finally(() => setLoading(false))\r\n    }, [])\r\n\r\n    if (loading) {\r\n        return <Spinner animation={\"grow\"}/>\r\n    }\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <NavBar />\r\n            <AppRouter />\r\n        </BrowserRouter>\r\n    );\r\n});\r\n\r\nexport default App;\r\n","D:\\pern\\client\\src\\store\\UserStore.js",[],"D:\\pern\\client\\src\\store\\DeviceStore.js",[],"D:\\pern\\client\\src\\components\\NavBar.js",[],"D:\\pern\\client\\src\\components\\AppRouter.js",[],"D:\\pern\\client\\src\\http\\userAPI.js",[],"D:\\pern\\client\\src\\routes.js",[],"D:\\pern\\client\\src\\http\\index.js",[],"D:\\pern\\client\\src\\utils\\consts.js",[],"D:\\pern\\client\\src\\pages\\About.js",[],"D:\\pern\\client\\src\\pages\\DevicePage.js",["119"],"import React, {useEffect, useState} from 'react';\r\nimport {Button, Card, Col, Container, Image, Row} from \"react-bootstrap\";\r\nimport bigStar from '../assets/bigStar.png'\r\nimport {useHistory, useParams} from 'react-router-dom'\r\nimport {deleteOneDevice, fetchOneDevice} from \"../http/deviceAPI\";\r\nimport {DEVICE_ROUTE} from \"../utils/consts\";\r\n\r\nconst DevicePage = () => {\r\n    const history = useHistory()\r\n    const [device, setDevice] = useState({info: []})\r\n    const {id} = useParams()\r\n    useEffect(() => {\r\n        fetchOneDevice(id).then(data => setDevice(data))\r\n    }, [])\r\n\r\n    const deleteDevice = async () => {\r\n        const sure = window.confirm(`Вы уверены, что хотите удалить ${device.name}`)\r\n        if (sure) {\r\n            await deleteOneDevice(device.id)\r\n        }\r\n    }\r\n\r\n    return (\r\n            <Container className=\"mt-3\">\r\n                <Row>\r\n                    <Col md={4}>\r\n                        <Image width={300} height={300} src={process.env.REACT_APP_API_URL + device.img}/>\r\n                    </Col>\r\n                    <Col md={4}>\r\n                        <Row className=\"d-flex flex-column align-items-center\">\r\n                            <h2>{device.name}</h2>\r\n                            <div\r\n                                className=\"d-flex align-items-center justify-content-center\"\r\n                                style={{\r\n                                    background: `url(${bigStar}) no-repeat center center`,\r\n                                    width: 240,\r\n                                    height: 240,\r\n                                    backgroundSize: 'cover',\r\n                                    fontSize: 64\r\n                                }}\r\n                            >\r\n                                {device.rating}\r\n                            </div>\r\n                        </Row>\r\n                    </Col>\r\n                    <Col md={4}>\r\n                        <Card\r\n                            className=\"d-flex flex-column align-items-center justify-content-around\"\r\n                            style={{width: 300, height: 300, fontSize: 32, border: '5px solid lightgray'}}\r\n                        >\r\n                            <h3>От: {new Intl.NumberFormat().format(device.price)} грн.</h3>\r\n                            <Button variant={\"outline-dark\"}>Добавить в корзину</Button>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"d-flex flex-column m-3\">\r\n                    <h1>Характеристики</h1>\r\n                    {device.info.map((info, index) =>\r\n                        <Row key={info.id}\r\n                             style={{background: index % 2 === 0 ? 'lightgray' : 'transparent', padding: 10}}>\r\n                            {info.title}: {info.description}\r\n                        </Row>\r\n                    )}\r\n                </Row>\r\n                <Button className='mr-3' variant={\"outline-info\"} onClick={() => history.push(DEVICE_ROUTE)}>Вернутся к товарам</Button>\r\n                <Button variant={\"outline-danger\"} onClick={deleteDevice}>Удалить</Button>\r\n            </Container>\r\n    );\r\n};\r\n\r\nexport default DevicePage;\r\n","D:\\pern\\client\\src\\pages\\Auth.js",["120"],"import React, {useContext, useState} from 'react';\r\nimport {Container, Form} from \"react-bootstrap\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport {NavLink, useLocation, useHistory} from \"react-router-dom\";\r\nimport {LOGIN_ROUTE, REGISTRATION_ROUTE, SHOP_ROUTE} from \"../utils/consts\";\r\nimport {login, registration} from \"../http/userAPI\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {Context} from \"../index\";\r\n\r\nconst Auth = observer(() => {\r\n    const {user} = useContext(Context)\r\n    const location = useLocation()\r\n    const history = useHistory()\r\n    const isLogin = location.pathname === LOGIN_ROUTE\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n\r\n    const click = async () => {\r\n        try {\r\n            let data;\r\n            if (isLogin) {\r\n                data = await login(email, password);\r\n            } else {\r\n                data = await registration(email, password);\r\n            }\r\n            user.setUser(user)\r\n            user.setIsAuth(true)\r\n            history.push(SHOP_ROUTE)\r\n        } catch (e) {\r\n            alert(e.response.data.message)\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <Container\r\n            className=\"d-flex justify-content-center align-items-center\"\r\n            style={{height: window.innerHeight - 54}}\r\n        >\r\n            <Card style={{width: 600}} className=\"p-5\">\r\n                <h2 className=\"m-auto\">{isLogin ? 'Авторизация' : \"Регистрация\"}</h2>\r\n                <Form className=\"d-flex flex-column\">\r\n                    <Form.Control\r\n                        className=\"mt-3\"\r\n                        placeholder=\"Введите ваш email...\"\r\n                        value={email}\r\n                        onChange={e => setEmail(e.target.value)}\r\n                    />\r\n                    <Form.Control\r\n                        className=\"mt-3\"\r\n                        placeholder=\"Введите ваш пароль...\"\r\n                        value={password}\r\n                        onChange={e => setPassword(e.target.value)}\r\n                        type=\"password\"\r\n                    />\r\n                    <Row className=\"d-flex justify-content-between mt-3 pl-3 pr-3\">\r\n                        {isLogin ?\r\n                            <div>\r\n                                Нет аккаунта? <NavLink to={REGISTRATION_ROUTE}>Зарегистрируйся!</NavLink>\r\n                            </div>\r\n                            :\r\n                            <div>\r\n                                Есть аккаунт? <NavLink to={LOGIN_ROUTE}>Войдите!</NavLink>\r\n                            </div>\r\n                        }\r\n                        <Button\r\n                            variant={\"outline-success\"}\r\n                            onClick={click}\r\n                        >\r\n                            {isLogin ? 'Войти' : 'Регистрация'}\r\n                        </Button>\r\n                    </Row>\r\n\r\n                </Form>\r\n            </Card>\r\n        </Container>\r\n    );\r\n});\r\n\r\nexport default Auth;\r\n","D:\\pern\\client\\src\\pages\\Shop.js",["121","122"],"import React, {useContext, useEffect} from 'react';\r\nimport {Container} from \"react-bootstrap\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport TypeBar from \"../components/TypeBar\";\r\nimport BrandBar from \"../components/BrandBar\";\r\nimport DeviceList from \"../components/DeviceList\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {Context} from \"../index\";\r\nimport {fetchBrands, fetchDevices, fetchTypes} from \"../http/deviceAPI\";\r\nimport Pages from \"../components/Pages\";\r\n\r\nconst Shop = observer(() => {\r\n    const {device} = useContext(Context)\r\n\r\n    useEffect(() => {\r\n        fetchTypes().then(data => device.setTypes(data))\r\n        fetchBrands().then(data => device.setBrands(data))\r\n        fetchDevices(null, null, 1, 2).then(data => {\r\n            device.setDevices(data.rows)\r\n            device.setTotalCount(data.count)\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        fetchDevices(device.selectedType.id, device.selectedBrand.id, device.page, 2).then(data => {\r\n            device.setDevices(data.rows)\r\n            device.setTotalCount(data.count)\r\n        })\r\n    }, [device.page, device.selectedType, device.selectedBrand,])\r\n\r\n    return (\r\n        <Container>\r\n            <Row className=\"mt-2\">\r\n                <Col md={3}>\r\n                    <TypeBar/>\r\n                </Col>\r\n                <Col md={9}>\r\n                    <BrandBar/>\r\n                    <DeviceList/>\r\n                    <Pages/>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n});\r\n\r\nexport default Shop;\r\n","D:\\pern\\client\\src\\pages\\Basket.js",[],"D:\\pern\\client\\src\\pages\\Admin.js",[],"D:\\pern\\client\\src\\http\\deviceAPI.js",["123"],"import {$authHost, $host} from \"./index\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nexport const createType = async (type) => {\r\n    const {data} = await $authHost.post('api/type', type)\r\n    return data\r\n}\r\n\r\nexport const fetchTypes = async () => {\r\n    const {data} = await $host.get('api/type')\r\n    return data\r\n}\r\n\r\nexport const createBrand = async (brand) => {\r\n    const {data} = await $authHost.post('api/brand', brand)\r\n    return data\r\n}\r\n\r\nexport const fetchBrands = async () => {\r\n    const {data} = await $host.get('api/brand', )\r\n    return data\r\n}\r\n\r\nexport const createDevice = async (device) => {\r\n    const {data} = await $authHost.post('api/device', device)\r\n    return data\r\n}\r\n\r\nexport const fetchDevices = async (typeId, brandId, page, limit= 5) => {\r\n    const {data} = await $host.get('api/device', {params: {\r\n            typeId, brandId, page, limit\r\n        }})\r\n    return data\r\n}\r\n\r\nexport const fetchOneDevice = async (id) => {\r\n    const {data} = await $host.get('api/device/' + id)\r\n    return data\r\n}\r\n\r\nexport const deleteOneDevice = async (id) => {\r\n    const {data} = await $host.delete('api/device/' + id)\r\n    return data\r\n}\r\n\r\nexport const updateOneDevice = async(name, rating, price, id) => {\r\n    const {data} = await $host.put('api/device/' + id, {params: {\r\n            name, rating, price\r\n        }})\r\n    return data\r\n}\r\n","D:\\pern\\client\\src\\components\\Pages.js",[],"D:\\pern\\client\\src\\components\\DeviceList.js",[],"D:\\pern\\client\\src\\components\\BrandBar.js",[],"D:\\pern\\client\\src\\components\\TypeBar.js",["124"],"import React, {useContext} from 'react';\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {Context} from \"../index\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nconst TypeBar = observer(() => {\r\n    const {device} = useContext(Context)\r\n    return (\r\n        <ListGroup>\r\n            {device.types.map(type =>\r\n                <ListGroup.Item\r\n                    style={{cursor: 'pointer'}}\r\n                    active={type.id === device.selectedType.id}\r\n                    onClick={() => device.setSelectedType(type)}\r\n                    key={type.id}\r\n                >\r\n                    {type.name}\r\n                </ListGroup.Item>\r\n            )}\r\n        </ListGroup>\r\n    );\r\n});\r\n\r\nexport default TypeBar;\r\n","D:\\pern\\client\\src\\components\\modals\\CreateType.js",[],"D:\\pern\\client\\src\\components\\modals\\CreateDevice.js",["125","126"],"import React, {useContext, useEffect, useState} from 'react';\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport {Button, Dropdown, Form, Row, Col} from \"react-bootstrap\";\r\nimport {Context} from \"../../index\";\r\nimport {createDevice, fetchBrands, fetchDevices, fetchTypes} from \"../../http/deviceAPI\";\r\nimport {observer} from \"mobx-react-lite\";\r\n\r\nconst CreateDevice = observer(({show, onHide}) => {\r\n    const {device} = useContext(Context)\r\n    const [name, setName] = useState('')\r\n    const [price, setPrice] = useState(0)\r\n    const [file, setFile] = useState(null)\r\n    const [rating, setRating] = useState(1)\r\n    const [info, setInfo] = useState([])\r\n\r\n    useEffect(() => {\r\n        fetchTypes().then(data => device.setTypes(data))\r\n        fetchBrands().then(data => device.setBrands(data))\r\n    }, [])\r\n\r\n    const addInfo = () => {\r\n        setInfo([...info, {title: '', description: '', number: Date.now()}])\r\n    }\r\n    const removeInfo = (number) => {\r\n        setInfo(info.filter(i => i.number !== number))\r\n    }\r\n    const changeInfo = (key, value, number) => {\r\n        setInfo(info.map(i => i.number === number ? {...i, [key]: value} : i))\r\n    }\r\n\r\n    const selectFile = e => {\r\n        setFile(e.target.files[0])\r\n    }\r\n\r\n    const addDevice = () => {\r\n        const formData = new FormData()\r\n            formData.append('rating', `${rating}`)\r\n            formData.append('name', name)\r\n            formData.append('price', `${price}`)\r\n            formData.append('img', file)\r\n            formData.append('brandId', device.selectedBrand.id)\r\n            formData.append('typeId', device.selectedType.id)\r\n            formData.append('info', JSON.stringify(info))\r\n            createDevice(formData).then(data => onHide())\r\n        }\r\n\r\n    return (\r\n        <Modal\r\n            show={show}\r\n            onHide={onHide}\r\n            centered\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Добавить устройство\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Dropdown className=\"mt-2 mb-2\">\r\n                        <Dropdown.Toggle>{device.selectedType.name || \"Выберите тип\"}</Dropdown.Toggle>\r\n                        <Dropdown.Menu>\r\n                            {device.types.map(type =>\r\n                                <Dropdown.Item\r\n                                    onClick={() => device.setSelectedType(type)}\r\n                                    key={type.id}\r\n                                >\r\n                                    {type.name}\r\n                                </Dropdown.Item>\r\n                            )}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                    <Dropdown className=\"mt-2 mb-2\">\r\n                        <Dropdown.Toggle>{device.selectedBrand.name || \"Выберите бренд\"}</Dropdown.Toggle>\r\n                        <Dropdown.Menu>\r\n                            {device.brands.map(brand =>\r\n                                <Dropdown.Item\r\n                                    onClick={() => device.setSelectedBrand(brand)}\r\n                                    key={brand.id}\r\n                                >\r\n                                    {brand.name}\r\n                                </Dropdown.Item>\r\n                            )}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n\r\n                    <Form.Control\r\n                        value={name}\r\n                        onChange={e => setName(e.target.value)}\r\n                        className=\"mt-3 mb-3\"\r\n                        placeholder=\"Введите название устройства\"\r\n                    />\r\n                    <Form.Group>\r\n                        <Form.Label>Введите стоимость устройства</Form.Label>\r\n                        <Form.Control\r\n                            value={price}\r\n                            onChange={e => setPrice(Number(e.target.value))}\r\n                            className=\"mt-3\"\r\n                            placeholder=\"Введите стоимость устройства\"\r\n                            type=\"number\"\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Label className=\"mr-2\">Введите рейтинг товара</Form.Label>\r\n                        <Form.Control\r\n                            className=\"mt-3\"\r\n                            type=\"number\"\r\n                            value={rating}\r\n                            placeholder=\"Введите рейтинг товара\"\r\n                            onChange={e => setRating(Number(e.target.value))}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Control\r\n                        className=\"mt-3\"\r\n                        type=\"file\"\r\n                        onChange={selectFile}\r\n                    />\r\n                    <hr/>\r\n                    <Button\r\n                        variant={\"outline-dark\"}\r\n                        onClick={addInfo}\r\n                    >\r\n                        Добавить новое свойство\r\n                    </Button>\r\n                    {info.map(i =>\r\n                        <Row className=\"mt-4\" key={i.number}>\r\n                            <Col md={4}>\r\n                                <Form.Control\r\n                                    value={i.title}\r\n                                    onChange={(e) => changeInfo('title', e.target.value, i.number)}\r\n                                    placeholder=\"Введите название свойства\"\r\n                                />\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <Form.Control\r\n                                    value={i.description}\r\n                                    onChange={(e) => changeInfo('description', e.target.value, i.number)}\r\n                                    placeholder=\"Введите описание свойства\"\r\n                                />\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <Button\r\n                                    onClick={() => removeInfo(i.number)}\r\n                                    variant={\"outline-danger\"}\r\n                                >\r\n                                    Удалить\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    )}\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"outline-danger\" onClick={onHide}>Закрыть</Button>\r\n                <Button variant=\"outline-success\" onClick={addDevice}>Добавить</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n});\r\n\r\nexport default CreateDevice;\r\n","D:\\pern\\client\\src\\components\\modals\\CreateBrand.js",["127"],"import React, {useState} from 'react';\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport {Button, Form} from \"react-bootstrap\";\r\nimport {createBrand, createType} from \"../../http/deviceAPI\";\r\n\r\nconst CreateBrand = ({show, onHide}) => {\r\n    const [value, setValue] = useState('')\r\n\r\n    const addBrand = () => {\r\n        createBrand({name: value}).then(data => {\r\n            setValue('')\r\n            onHide()\r\n        })\r\n    }\r\n    return (\r\n        <Modal\r\n            show={show}\r\n            onHide={onHide}\r\n            centered\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Добавить тип\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Control\r\n                        value={value}\r\n                        onChange={e => setValue(e.target.value)}\r\n                        placeholder={\"Введите название типа\"}\r\n                    />\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"outline-danger\" onClick={onHide}>Закрыть</Button>\r\n                <Button variant=\"outline-success\" onClick={addBrand}>Добавить</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default CreateBrand;\r\n","D:\\pern\\client\\src\\components\\DeviceItem.js",[],"D:\\pern\\client\\src\\components\\modals\\UpdateDevice.js",["128","129","130","131","132","133","134"],"import React, {useContext, useEffect, useState} from 'react';\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport {Button, Form, Row, Col} from \"react-bootstrap\";\r\nimport {Context} from \"../../index\";\r\nimport {fetchBrands, fetchOneDevice, fetchTypes, updateOneDevice} from \"../../http/deviceAPI\";\r\nimport {observer} from \"mobx-react-lite\";\r\n\r\nconst UpdateDevice = observer(({show, onHide, id}) => {\r\n    const {device} = useContext(Context)\r\n    const [name, setName] = useState('')\r\n    const [price, setPrice] = useState(0)\r\n    const [rating, setRating] = useState(1)\r\n\r\n    useEffect(async() => {\r\n        const deviceById = await fetchOneDevice(id)\r\n        setName(deviceById.name)\r\n        setPrice(deviceById.price)\r\n        setRating(deviceById.rating)\r\n    }, [])\r\n\r\n\r\n    const updateDevice = () => {\r\n        updateOneDevice(name, rating, price, id).then(data => onHide())\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            show={show}\r\n            onHide={onHide}\r\n            centered\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Обновить устройство\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Control\r\n                        value={name}\r\n                        onChange={e => setName(e.target.value)}\r\n                        className=\"mt-3 mb-3\"\r\n                        placeholder=\"Введите название устройства\"\r\n                    />\r\n                    <Form.Group>\r\n                        <Form.Label>Введите стоимость устройства</Form.Label>\r\n                        <Form.Control\r\n                            value={price}\r\n                            onChange={e => setPrice(Number(e.target.value))}\r\n                            className=\"mt-3\"\r\n                            placeholder=\"Введите стоимость устройства\"\r\n                            type=\"number\"\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Label className=\"mr-2\">Введите рейтинг товара</Form.Label>\r\n                        <Form.Control\r\n                            className=\"mt-3\"\r\n                            type=\"number\"\r\n                            value={rating}\r\n                            placeholder=\"Введите рейтинг товара\"\r\n                            onChange={e => setRating(Number(e.target.value))}\r\n                        />\r\n                    </Form.Group>\r\n                    <hr/>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"outline-danger\" onClick={onHide}>Закрыть</Button>\r\n                <Button variant=\"outline-success\" onClick={updateDevice}>Добавить</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n});\r\n\r\nexport default UpdateDevice;",{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","severity":1,"message":"140","line":19,"column":8,"nodeType":"141","endLine":19,"endColumn":10,"suggestions":"142"},{"ruleId":"139","severity":1,"message":"143","line":14,"column":8,"nodeType":"141","endLine":14,"endColumn":10,"suggestions":"144"},{"ruleId":"145","severity":1,"message":"146","line":26,"column":17,"nodeType":"147","messageId":"148","endLine":26,"endColumn":21},{"ruleId":"139","severity":1,"message":"149","line":23,"column":8,"nodeType":"141","endLine":23,"endColumn":10,"suggestions":"150"},{"ruleId":"139","severity":1,"message":"149","line":30,"column":8,"nodeType":"141","endLine":30,"endColumn":65,"suggestions":"151"},{"ruleId":"145","severity":1,"message":"152","line":2,"column":8,"nodeType":"147","messageId":"148","endLine":2,"endColumn":18},{"ruleId":"145","severity":1,"message":"153","line":4,"column":8,"nodeType":"147","messageId":"148","endLine":4,"endColumn":11},{"ruleId":"145","severity":1,"message":"154","line":5,"column":36,"nodeType":"147","messageId":"148","endLine":5,"endColumn":48},{"ruleId":"139","severity":1,"message":"149","line":19,"column":8,"nodeType":"141","endLine":19,"endColumn":10,"suggestions":"155"},{"ruleId":"145","severity":1,"message":"156","line":4,"column":22,"nodeType":"147","messageId":"148","endLine":4,"endColumn":32},{"ruleId":"145","severity":1,"message":"157","line":3,"column":23,"nodeType":"147","messageId":"148","endLine":3,"endColumn":26},{"ruleId":"145","severity":1,"message":"153","line":3,"column":28,"nodeType":"147","messageId":"148","endLine":3,"endColumn":31},{"ruleId":"145","severity":1,"message":"158","line":5,"column":9,"nodeType":"147","messageId":"148","endLine":5,"endColumn":20},{"ruleId":"145","severity":1,"message":"159","line":5,"column":38,"nodeType":"147","messageId":"148","endLine":5,"endColumn":48},{"ruleId":"145","severity":1,"message":"160","line":9,"column":12,"nodeType":"147","messageId":"148","endLine":9,"endColumn":18},{"ruleId":"139","severity":1,"message":"161","line":14,"column":15,"nodeType":"162","endLine":19,"endColumn":6},{"ruleId":"139","severity":1,"message":"143","line":19,"column":8,"nodeType":"141","endLine":19,"endColumn":10,"suggestions":"163"},"no-native-reassign",["164"],"no-negated-in-lhs",["165"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.","ArrayExpression",["166"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["167"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'device'. Either include it or remove the dependency array.",["168"],["169"],"'jwt_decode' is defined but never used.","'Col' is defined but never used.","'fetchDevices' is defined but never used.",["170"],"'createType' is defined but never used.","'Row' is defined but never used.","'fetchBrands' is defined but never used.","'fetchTypes' is defined but never used.","'device' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression",["171"],"no-global-assign","no-unsafe-negation",{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"176","fix":"180"},{"desc":"174","fix":"181"},"Update the dependencies array to be: [user]",{"range":"182","text":"183"},"Update the dependencies array to be: [id]",{"range":"184","text":"185"},"Update the dependencies array to be: [device]",{"range":"186","text":"187"},"Update the dependencies array to be: [device.page, device.selectedType, device.selectedBrand, device]",{"range":"188","text":"189"},{"range":"190","text":"187"},{"range":"191","text":"185"},[659,661],"[user]",[578,580],"[id]",[897,899],"[device]",[1136,1193],"[device.page, device.selectedType, device.selectedBrand, device]",[809,811],[770,772]]